// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=instructionMux);
        Mux16(a=aRegisterOut, b=inM, sel=a, out=memoryMux);
        
        // clear instructions if it A command
        Mux16(
            a=false, 
            b=instruction, 
            sel=instruction[15],
            out[0]=j3,                                           
            out[1]=j2,                                           
            out[2]=j1,                                                       
            out[3]=writeM,                                           
            out[4]=d2,            
            out[5]=d1,  
            out[6]=c6,            
            out[7]=c5,            
            out[8]=c4,            
            out[9]=c3,            
            out[10]=c2,            
            out[11]=c1,  
            out[12]=a            
        );
        
        Not(in=instruction[15], out=notOpcode);
        Or(a=notOpcode, b=d1, out=loadARegister);
        ARegister(in=instructionMux, load=loadARegister, out=aRegisterOut, out[0..14]=addressM);
        DRegister(in=aluOutput, load=d2, out=dRegisterOut);                     

        ALU(x=dRegisterOut, 
            y=memoryMux, 
            zx=c1,
            nx=c2,
            zy=c3,
            ny=c4,
            f=c5,
            no=c6, 
            out=aluOutput, 
            out=outM,             
            zr=zr, 
            ng=ng
        );

        // Control unit    
        Not(in=zr, out=notZR);
        Not(in=ng, out=notNG);

        // JGT => j3 and !zr and !ng
        And(a=j3, b=notZR, out=jgt1);
        And(a=jgt1, b=notNG, out=jgt);

        // JEQ => j2 and zr
        And(a=j2, b=zr, out=jeq);

        // JGE => (j2 and j3) and !ng
        And(a=j2, b=j3, out=jge1);
        And(a=jge1, b=notNG, out=jge);

        // JLT => j1 and ng
        And(a=j1, b=ng, out=jlt);

        // JNE => (j1 and j3) and !zr
        And(a=j1, b=j3, out=jne1);
        And(a=jne1, b=notZR, out=jne);

        // JLE => (j1 and j2) and (zr or ng)
        And(a=j1, b=j2, out=jle1);
        Or(a=zr, b=ng, out=jle2);
        And(a=jle1, b=jle2, out=jle);        

        // JMP => (j1 and j2 and j3)
        And(a=j1, b=j2, out=jmp1);
        And(a=jmp1, b=j3, out=jmp);

        Or8Way(
            in[0]=jgt, 
            in[1]=jeq, 
            in[2]=jge, 
            in[3]=jlt, 
            in[4]=jne, 
            in[5]=jle, 
            in[6]=jmp, 
            out=jmpPC
        );

        PC(in=aRegisterOut, load=jmpPC, inc=true, reset=reset, out[0..14]=pc);
}